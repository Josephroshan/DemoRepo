///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TestDemo
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("e856cd95-d9f0-4272-be40-63b012f0b4ae", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TestDemoRepository repository.
        /// </summary>
        public static TestDemoRepository repo = TestDemoRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
            Estimate = "yourValue";
            New = "yourValue";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

        string _Estimate;

        /// <summary>
        /// Gets or sets the value of variable Estimate.
        /// </summary>
        [TestVariable("293af9ad-fff3-4797-bcbc-4a3bc78cab4f")]
        public string Estimate
        {
            get { return _Estimate; }
            set { _Estimate = value; }
        }

        string _New;

        /// <summary>
        /// Gets or sets the value of variable New.
        /// </summary>
        [TestVariable("9c089778-a1ae-4b22-bdb2-eb9df1c947d0")]
        public string New
        {
            get { return _New; }
            set { _New = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run application 'C:\\Program Files\\Beck Technology\\DESTINI Estimator\\App\\Estimator.exe' in normal mode. Return value bound to $.", new RecordItemIndex(0));
            Host.Local.RunApplication("C:\\Program Files\\Beck Technology\\DESTINI Estimator\\App\\Estimator.exe", "", "C:\\Program Files\\Beck Technology\\DESTINI Estimator\\App", false);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(1));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ButtonNew' at 32;38.", repo.ApplicationUnderTest.ButtonNewInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.ButtonNew.Click("32;38");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(3));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Title='DESTINI Estimator - Untitled') on item 'ApplicationUnderTest'.", repo.ApplicationUnderTest.SelfInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.SelfInfo, "Title", "DESTINI Estimator - Untitled");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Enabled' to contain the specified value 'Rates&Resources'. Associated repository item: 'ApplicationUnderTest.RatesResources'", repo.ApplicationUnderTest.RatesResourcesInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.RatesResourcesInfo.WaitForAttributeContains(5000, "Enabled", "Rates&Resources");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
